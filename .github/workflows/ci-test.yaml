name: Run CI Tests

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12", "3.13"]
    steps:
        # Use multiple Python versions as a matrix in the job.
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

        # Use Poetry version number in the cache key and the "-0" suffix to invalidate the cache manually
      - name: Cache Poetry Install
        uses: actions/cache@v2
        with:
          path: ~/.local
          key: poetry-1.1.12-0

        # `virtualenvs-in-project: true`: creates the venv as a `.venv` in your testing directory to cache it.
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.1.12
          virtualenvs-create: true
          virtualenvs-in-project: true

        # Cache the dependencies
      - name: Cache Dependencies
        id: cache-deps
        uses: actions/cache@v2
        with:
          path: .venv
          key: pydeps-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

        # Install dependencies.
      - name: Install Dependencies
        run: poetry install --no-interaction --no-root
        if: steps.cache-deps.outputs.cache-hit != 'true'

        # Install the project itself.
      - name: Install Project
        run: poetry install --no-interaction

        # pytest and all the config is in `pyproject.toml`
      - name: Run Tests
        run: poetry run pytest

# Credits: https://jacobian.org/til/github-actions-poetry/
